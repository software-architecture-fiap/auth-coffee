{
  "service": {
    "service": "tech-challenge",
    "serviceObject": {
      "name": "tech-challenge"
    },
    "provider": {
      "name": "aws",
      "region": "sa-east-1",
      "ecr": {
        "images": {
          "tech-challenge": {
            "path": "."
          }
        }
      },
      "deploymentBucket": "tech-challenge-deployment",
      "environment": {
        "STAGE": "dev",
        "DATABASE_URL": "local-database-url",
        "JWT_SECRET": "local-jwt-secret",
        "SECRET_KEY": "localhost@1988",
        "ADMIN_NAME": "Tester",
        "ADMIN_EMAIL": "teste1@example.com",
        "ADMIN_CPF": "123",
        "ADMIN_PASSWORD": "senhasenha1"
      },
      "stage": "dev",
      "versionFunctions": true,
      "deploymentBucketObject": {
        "name": "tech-challenge-deployment"
      },
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ApiLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tech-challenge-dev-api"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "tech-challenge",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tech-challenge-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tech-challenge-dev*:*:*"
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "tech-challenge",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "ApiLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "ImageUri": "211125678807.dkr.ecr.sa-east-1.amazonaws.com/serverless-tech-challenge-dev@sha256:391556e71e82966714a136a36c3849ba0b95dbe6d17c5351d27dd1c19f4bdba9"
              },
              "PackageType": "Image",
              "FunctionName": "tech-challenge-dev-api",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "STAGE": "dev",
                  "DATABASE_URL": "local-database-url",
                  "JWT_SECRET": "local-jwt-secret",
                  "SECRET_KEY": "localhost@1988",
                  "ADMIN_NAME": "Tester",
                  "ADMIN_EMAIL": "teste1@example.com",
                  "ADMIN_CPF": "123",
                  "ADMIN_PASSWORD": "senhasenha1"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ApiLogGroup"
            ]
          },
          "ApiLambdaVersionNptFcTnj5oI7sAbkysHlh1kmPBLuesMEHpgO4F2FsU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ApiLambdaFunction"
              },
              "CodeSha256": "391556e71e82966714a136a36c3849ba0b95dbe6d17c5351d27dd1c19f4bdba9"
            }
          },
          "HttpApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "dev-tech-challenge",
              "ProtocolType": "HTTP"
            }
          },
          "HttpApiStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "StageName": "$default",
              "AutoDeploy": true,
              "DefaultRouteSettings": {
                "DetailedMetricsEnabled": false
              }
            }
          },
          "ApiLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ApiLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationApi": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteAnyProxyVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "ANY /{proxy+}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationApi"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationApi"
          },
          "ApiGatewayHttpApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "TechChallengeHttpApi",
              "ProtocolType": "HTTP"
            }
          },
          "ApiGatewayHttpApiIntegration": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "ApiGatewayHttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "ApiLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0"
            }
          },
          "ApiGatewayHttpApiRoute": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "ApiGatewayHttpApi"
              },
              "RouteKey": "ANY /{proxy+}",
              "Target": {
                "Fn::Sub": "integrations/${ApiGatewayHttpApiIntegration}"
              }
            }
          },
          "ApiGatewayHttpApiStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "ApiGatewayHttpApi"
              },
              "StageName": "$default",
              "AutoDeploy": true
            }
          },
          "ApiLambdaPermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Ref": "ApiLambdaFunction"
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayHttpApi.ApiId}/*/*"
              }
            }
          },
          "ApiGatewayLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/http-api/tech_challenge",
              "RetentionInDays": 14
            }
          },
          "TechChallengeDatabase": {
            "Type": "AWS::RDS::DBInstance",
            "Properties": {
              "DBInstanceClass": "db.t3.micro",
              "AllocatedStorage": 20,
              "Engine": "postgres",
              "EngineVersion": 15.9,
              "DBName": "tech_challenge",
              "MasterUsername": "postgres",
              "MasterUserPassword": "localhost%401988",
              "PubliclyAccessible": true,
              "MultiAZ": false,
              "StorageType": "gp2",
              "BackupRetentionPeriod": 7,
              "VPCSecurityGroups": [
                {
                  "Fn::GetAtt": [
                    "RDSInstanceSecurityGroup",
                    "GroupId"
                  ]
                }
              ]
            }
          },
          "RDSInstanceSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
              "GroupDescription": "Enable PostgreSQL access",
              "SecurityGroupIngress": [
                {
                  "IpProtocol": "tcp",
                  "FromPort": 5432,
                  "ToPort": 5432,
                  "CidrIp": "0.0.0.0/0"
                }
              ]
            }
          },
          "DatabaseURLParameter": {
            "Type": "AWS::SSM::Parameter",
            "Properties": {
              "Name": {
                "Fn::Sub": "/tech-challenge/dev/DATABASE_URL"
              },
              "Type": "String",
              "Value": {
                "Fn::Sub": "postgres://postgres:localhost%401988@${TechChallengeDatabase.Endpoint.Address}:5432/tech_challenge"
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": "tech-challenge-deployment",
            "Export": {
              "Name": "sls-tech-challenge-dev-ServerlessDeploymentBucketName"
            }
          },
          "ApiLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ApiLambdaVersionNptFcTnj5oI7sAbkysHlh1kmPBLuesMEHpgO4F2FsU"
            },
            "Export": {
              "Name": "sls-tech-challenge-dev-ApiLambdaFunctionQualifiedArn"
            }
          },
          "HttpApiId": {
            "Description": "Id of the HTTP API",
            "Value": {
              "Ref": "HttpApi"
            },
            "Export": {
              "Name": "sls-tech-challenge-dev-HttpApiId"
            }
          },
          "HttpApiUrl": {
            "Description": "URL of the HTTP API",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "HttpApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  }
                ]
              ]
            },
            "Export": {
              "Name": "sls-tech-challenge-dev-HttpApiUrl"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "dotenv": {
        "path": ".env"
      }
    },
    "plugins": [
      "serverless-dotenv-plugin"
    ],
    "pluginsData": {},
    "functions": {
      "api": {
        "image": {
          "name": "tech-challenge"
        },
        "events": [
          {
            "httpApi": {
              "path": "/{proxy+}",
              "method": "ANY"
            },
            "resolvedMethod": "ANY",
            "resolvedPath": "/{proxy+}"
          }
        ],
        "name": "tech-challenge-dev-api",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "vpc": {},
        "versionLogicalId": "ApiLambdaVersionNptFcTnj5oI7sAbkysHlh1kmPBLuesMEHpgO4F2FsU"
      }
    },
    "resources": {
      "Resources": {
        "ApiGatewayHttpApi": {
          "Type": "AWS::ApiGatewayV2::Api",
          "Properties": {
            "Name": "TechChallengeHttpApi",
            "ProtocolType": "HTTP"
          }
        },
        "ApiGatewayHttpApiIntegration": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "ApiGatewayHttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "ApiLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0"
          }
        },
        "ApiGatewayHttpApiRoute": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "ApiGatewayHttpApi"
            },
            "RouteKey": "ANY /{proxy+}",
            "Target": {
              "Fn::Sub": "integrations/${ApiGatewayHttpApiIntegration}"
            }
          }
        },
        "ApiGatewayHttpApiStage": {
          "Type": "AWS::ApiGatewayV2::Stage",
          "Properties": {
            "ApiId": {
              "Ref": "ApiGatewayHttpApi"
            },
            "StageName": "$default",
            "AutoDeploy": true
          }
        },
        "ApiLambdaPermission": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Ref": "ApiLambdaFunction"
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayHttpApi.ApiId}/*/*"
            }
          }
        },
        "ApiGatewayLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/http-api/tech_challenge",
            "RetentionInDays": 14
          }
        },
        "TechChallengeDatabase": {
          "Type": "AWS::RDS::DBInstance",
          "Properties": {
            "DBInstanceClass": "db.t3.micro",
            "AllocatedStorage": 20,
            "Engine": "postgres",
            "EngineVersion": 15.9,
            "DBName": "tech_challenge",
            "MasterUsername": "postgres",
            "MasterUserPassword": "localhost%401988",
            "PubliclyAccessible": true,
            "MultiAZ": false,
            "StorageType": "gp2",
            "BackupRetentionPeriod": 7,
            "VPCSecurityGroups": [
              {
                "Fn::GetAtt": [
                  "RDSInstanceSecurityGroup",
                  "GroupId"
                ]
              }
            ]
          }
        },
        "RDSInstanceSecurityGroup": {
          "Type": "AWS::EC2::SecurityGroup",
          "Properties": {
            "GroupDescription": "Enable PostgreSQL access",
            "SecurityGroupIngress": [
              {
                "IpProtocol": "tcp",
                "FromPort": 5432,
                "ToPort": 5432,
                "CidrIp": "0.0.0.0/0"
              }
            ]
          }
        },
        "DatabaseURLParameter": {
          "Type": "AWS::SSM::Parameter",
          "Properties": {
            "Name": {
              "Fn::Sub": "/tech-challenge/dev/DATABASE_URL"
            },
            "Type": "String",
            "Value": {
              "Fn::Sub": "postgres://postgres:localhost%401988@${TechChallengeDatabase.Endpoint.Address}:5432/tech_challenge"
            }
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": "tech-challenge",
      "frameworkVersion": "3",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      },
      "package": {
        "individually": true,
        "patterns": [
          "**/__pycache__/**",
          "**/*.pyc",
          "**/tests/**",
          "**/test_*.py",
          "**/*.md",
          "**/*.log",
          "**/*.dist-info/**",
          "**/*.egg-info/**",
          ".git/**",
          ".vscode/**",
          ".serverless/**",
          "node_modules/**",
          "requirements/**"
        ],
        "artifactsS3KeyDirname": "serverless/tech-challenge/dev/code-artifacts",
        "deploymentBucket": "tech-challenge-deployment",
        "artifactDirectoryName": "serverless/tech-challenge/dev/1734379034875-2024-12-16T19:57:14.875Z"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false
  },
  "package": {
    "individually": true,
    "artifactDirectoryName": "serverless/tech-challenge/dev/1734379034875-2024-12-16T19:57:14.875Z",
    "artifact": ""
  }
}